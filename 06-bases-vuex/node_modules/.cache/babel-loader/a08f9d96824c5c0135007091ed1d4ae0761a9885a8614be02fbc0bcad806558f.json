{"ast":null,"code":"import { mapState, mapActions } from 'vuex'; //se usa para obtener todo lo que se quiera del state\nexport default {\n  name: 'CounterComponent',\n  //computed: mapState(['count'])\n  computed: {\n    countComputed() {\n      return this.$store.state.counter.count;\n    },\n    ...mapState('counter', ['count', 'lastMutation', 'isLoading'])\n    // ...mapState({\n    //     count: state => state.count\n    // })\n  },\n\n  methods: {\n    increment() {\n      //define el modulo del cual se llama la mutation\n      this.$store.commit('counter/increment'); //dispara la mutacion\n    },\n\n    incrementBy() {\n      this.$store.commit('counter/incrementBy', 5); //mutacion con parametro\n    },\n\n    // incrementRandom(){\n    //     this.$store.dispatch('incrementRandomInt')\n    // },\n    //el primer argumento es el modulo del cual se quieren extraer las acciones\n    //...mapActions('counter', ['incrementRandomInt'])\n    ...mapActions('counter', {\n      randomInt: 'incrementRandomInt'\n    })\n  }\n};","map":{"version":3,"names":["mapState","mapActions","name","computed","countComputed","$store","state","counter","count","methods","increment","commit","incrementBy","randomInt"],"sources":["/home/des-sis18/proyectosHTML/VueJsCourse/BasesVue/vueApp/06-bases-vuex/src/components/CounterComponent.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>Counter - vuex</h1>\n        <h2>Direct access: {{ $store.state.counter.count }}</h2>\n        <h2>Computed: {{ countComputed }}</h2>\n\n        <button @click=\"increment\">+1</button>\n        <button @click=\"incrementBy\">+5</button>\n        <button @click=\"randomInt\" :disabled=\"isLoading\">Random</button>\n        <h1>mapState</h1>\n        <h2>mapState:{{ count }}</h2>\n        <h2>lastMutation:{{ lastMutation }}</h2>\n\n        <h2>Direct getter: {{ $store.getters['counter/squareCount'] }}</h2>\n    </div>\n</template>\n\n<script>\nimport {mapState, mapActions} from 'vuex' //se usa para obtener todo lo que se quiera del state\n    export default {\n        name:'CounterComponent',\n\n        //computed: mapState(['count'])\n         computed:{\n             countComputed(){\n                return this.$store.state.counter.count \n             },\n\n             ...mapState('counter', ['count','lastMutation','isLoading'])\n            // ...mapState({\n            //     count: state => state.count\n            // })\n\n         },\n\n         methods: {\n\n            increment(){\n                                  //define el modulo del cual se llama la mutation\n               this.$store.commit('counter/increment') //dispara la mutacion\n            },\n            incrementBy(){\n                this.$store.commit('counter/incrementBy', 5) //mutacion con parametro\n            },\n\n            // incrementRandom(){\n            //     this.$store.dispatch('incrementRandomInt')\n            // },\n                        //el primer argumento es el modulo del cual se quieren extraer las acciones\n            //...mapActions('counter', ['incrementRandomInt'])\n             ...mapActions('counter',{\n                 randomInt:'incrementRandomInt'\n             })\n         },\n\n        \n    }\n</script>"],"mappings":"AAkBA,SAAQA,QAAQ,EAAEC,UAAU,QAAO,MAAK,EAAE;AACtC,eAAe;EACXC,IAAI,EAAC,kBAAkB;EAEvB;EACCC,QAAQ,EAAC;IACLC,aAAaA,CAAA,EAAE;MACZ,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAACC,KAAI;IACxC,CAAC;IAED,GAAGR,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,EAAC,cAAc,EAAC,WAAW,CAAC;IAC5D;IACA;IACA;EAEH,CAAC;;EAEDS,OAAO,EAAE;IAENC,SAASA,CAAA,EAAE;MACW;MACnB,IAAI,CAACL,MAAM,CAACM,MAAM,CAAC,mBAAmB,GAAE;IAC3C,CAAC;;IACDC,WAAWA,CAAA,EAAE;MACT,IAAI,CAACP,MAAM,CAACM,MAAM,CAAC,qBAAqB,EAAE,CAAC,GAAE;IACjD,CAAC;;IAED;IACA;IACA;IACY;IACZ;IACC,GAAGV,UAAU,CAAC,SAAS,EAAC;MACpBY,SAAS,EAAC;IACd,CAAC;EACL;AAGL"},"metadata":{},"sourceType":"module","externalDependencies":[]}